apiVersion: devops.alauda.io/v1alpha1
kind: PipelineTaskTemplate
metadata:
  name: alauda-all-in-one
  annotations:
    alauda.io/displayName.zh-CN: AllInOneTask
    alauda.io/displayName.en: AllInOneTask
    alauda.io/description.zh-CN: AllInOneTask
    alauda.io/description.en: AllInOneTask
    alauda.io/readme.zh-CN: AllInOneTask
    alauda.io/readme.en: AllInOneTask
    alauda.io/version: "2.6.3"
    alauda.io/style.icon: ""
  labels:
    category: CI
spec:
  engine: gotpl
  body: |+
    script {
        {{- if .Library }}
        library "{{.Library}}"
        {{- end }}

        {{- define "language" -}}
        {{- if eq . "golang-1.12" "golang" "golang-1.11" "golang-1.10" -}}
        {{- print "golang" }}
        {{- else if eq . "python-2.7" "python-3.6" "python-3.7" "python" -}}
        {{- print "python" }}
        {{- else if eq . "java-8" "java" "maven" "openjdk8" -}}
        {{- print "java" }}
        {{- else if eq . "nodejs" "nodejs-10" "chromenew" "chrome" -}}
        {{- print "chrome" }}
        {{- else }}
        {{- print "golang" }}
        {{- end }}
        {{- end }}

        def language = "{{ template "language" .Agent}}"

        AlaudaPipeline{
          config = [
              agent: '{{.Agent}}',
              folder: '{{.RelativeDirectory}}',
              {{- if .chartName }}
              chart: [
                  chart: "{{.chartName}}",
                  component: "{{.componentName}}",
              ],
              {{- end }}
              {{- if .PlatformCodeRepository }}
              scm: [
                  credentials: '{{ .PlatformCodeRepository.credentialId }}'
              ],
              {{- end }}
              {{- if .imageRepository }}
              docker: [
                  repository: "{{ .imageRepository.repositoryPath }}",
                  credentials: "{{ .imageRepository.credentialId }}",
                  context: "{{ .dockerContext }}",
                  dockerfile: "{{ .dockerFile }}",
              ],
              {{- end }}
              {{- if .CodeQualityBinding}}
              sonar: [
                  binding: "{{ .CodeQualityBinding.name }}"
              ],
              {{- end }}
          ]
          env = [
              {{- if .supportGoModules }}
              GO111MODULE: "on",
              {{- else }}
              GOPATH: "",
              {{ end }}
              {{- if .goProxy }}
              GOPROXY: "{{.goProxy}}",
              {{- end }}
          ]
          {{- if .UseYaml }}
          yaml = "alauda.yaml"
          stepsYaml =
          """
          steps:
          {{- if .unitTestCommand }}
          - name: "Unit test"
            container: "{{ template "language" .Agent }}"
            groovy: 
            - |+
              try {
                sh script: """{{ .unitTestCommand }}""", label: "unit tests..."
              } finally {
                {{- if .junitTestReport }}
                junit allowEmptyResults: true, testResults: '{{.junitTestReport}}'
                {{- else }}
                echo 'unit tests failed'
                {{- end }}
              }
          {{- end }}
          {{- if .buildCommand }}
          - name: "Build"  
            container: "{{ template "language" .Agent }}"
            commands:
            - |+
              {{.buildCommand }}
          {{- end }}
          {{- if .compressCommand }}
          - name: "Compress"
            container: "tools"
            commands:
            - |+
              {{.compressCommand }}
          {{- end }}
          {{- if .prepareCommand }}
          - name: "Prepare"
            container: "tools"
            commands:
            - |+
              {{.prepareCommand }}
          {{- end }}
          """
          {{- else }}
          steps = [
              {{- if .unitTestCommand }}
              [
                  name: "Unit test",
                  container: language,
                  groovy: [
                    """
                      try {
                        sh script: "{{ .unitTestCommand }}", label: "unit tests..."
                      } finally {
                        {{- if .junitTestReport }}
                        junit allowEmptyResults: true, testResults: '{{.junitTestReport}}'
                        {{- else }}
                        echo 'unit tests failed'
                        {{- end }}
                      }
                    """
                  ] 
              ],
              {{- end }}
              {{- if .buildCommand }}
              [
                  name: "Build",
                  container: language,
                  commands: [
                    """{{.buildCommand }}""",
                  ]
              ],
              {{- end }}
              {{- if .compressCommand }}
              [
                  name: "Compress",
                  container: "tools",
                  commands: [
                    """{{.compressCommand }}""",
                  ]
              ],
              {{- end }}
              {{- if .prepareCommand }}
              [
                  name: "Prepare",
                  container: "tools",
                  commands: [
                    """{{.prepareCommand }}""",
                  ]
              ],
              {{- end }}
          ]
          {{- end}}
        }
    }
  
